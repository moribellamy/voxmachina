// Built from https://github.com/panghy/lionrock/releases/tag/v1.7.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.5.1
// source: lionrock.proto

package lionrock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Options that controls how range reads are done.
type StreamingMode int32

const (
	// The default. The client doesn't know how much of the range it is
	// likely to used and wants different performance concerns to be balanced.
	// Only a small portion of data is transferred to the client initially
	// (in order to minimize costs if the client doesn't read the entire range),
	// and as the caller iterates over more items in the range larger batches
	// will be transferred in order to minimize latency. After enough iterations,
	// the iterator mode will eventually reach the same byte limit as
	// {@code WANT_ALL}.
	StreamingMode_ITERATOR StreamingMode = 0
	// Client intends to consume the entire range and would like it all
	// transferred as early as possible.
	StreamingMode_WANT_ALL StreamingMode = 1
	// Infrequently used. The client has passed a specific row limit and wants that
	// many rows delivered in a single batch. Because of iterator operation in
	// client drivers make request batches transparent to the user, consider
	// {@code WANT_ALL} StreamingMode instead. A row limit must be specified if
	// this mode is used.
	StreamingMode_EXACT StreamingMode = 2
)

// Enum value maps for StreamingMode.
var (
	StreamingMode_name = map[int32]string{
		0: "ITERATOR",
		1: "WANT_ALL",
		2: "EXACT",
	}
	StreamingMode_value = map[string]int32{
		"ITERATOR": 0,
		"WANT_ALL": 1,
		"EXACT":    2,
	}
)

func (x StreamingMode) Enum() *StreamingMode {
	p := new(StreamingMode)
	*p = x
	return p
}

func (x StreamingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lionrock_proto_enumTypes[0].Descriptor()
}

func (StreamingMode) Type() protoreflect.EnumType {
	return &file_lionrock_proto_enumTypes[0]
}

func (x StreamingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingMode.Descriptor instead.
func (StreamingMode) EnumDescriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{0}
}

// Enum for mutation types to support CAS.
type MutationType int32

const (
	// Performs an addition of little-endian integers. If the existing value in the
	// database is not present or shorter than {@code param}, it is first extended
	// to the length of {@code param} with zero bytes.  If {@code param} is shorter
	// than the existing value in the database, the existing value is truncated to
	// match the length of {@code param}. The integers to be added must be stored
	// in a little-endian representation.  They can be signed in two's complement
	// representation or unsigned. You can add to an integer at a known offset in
	// the value by prepending the appropriate number of zero bytes to {@code param}
	// and padding with zero bytes to match the length of the value. However, this
	// offset technique requires that you know the addition will not cause the
	// integer field within the value to overflow.
	MutationType_ADD MutationType = 0
	// Performs a bitwise {@code and} operation.  If the existing value in the database
	// is not present, then {@code param} is stored in the database. If the existing
	// value in the database is shorter than {@code param}, it is first extended to
	// the length of {@code param} with zero bytes.  If {@code param} is shorter than
	// the existing value in the database, the existing value is truncated to match
	// the length of {@code param}.
	MutationType_BIT_AND MutationType = 1
	// Performs a bitwise {@code or} operation.  If the existing value in the database
	// is not present or shorter than {@code param}, it is first extended to the length
	// of {@code param} with zero bytes.  If {@code param} is shorter than the existing
	// value in the database, the existing value is truncated to match the length of
	// {@code param}.
	MutationType_BIT_OR MutationType = 2
	// Performs a bitwise {@code xor} operation.  If the existing value in the database
	// is not present or shorter than {@code param}, it is first extended to the length
	// of {@code param} with zero bytes.  If {@code param} is shorter than the existing
	// value in the database, the existing value is truncated to match the length of
	// {@code param}.
	MutationType_BIT_XOR MutationType = 3
	// Appends {@code param} to the end of the existing value already in the database
	// at the given key (or creates the key and sets the value to {@code param} if the
	// key is empty). This will only append the value if the final concatenated value
	// size is less than or equal to the maximum value size (i.e., if it fits). WARNING:
	// No error is surfaced back to the user if the final value is too large because
	// the mutation will not be applied until after the transaction has been committed.
	// Therefore, it is only safe to use this mutation type if one can guarantee that
	// one will keep the total value size under the maximum size.
	MutationType_APPEND_IF_FITS MutationType = 4
	// Performs a little-endian comparison of byte strings. If the existing value in
	// the database is not present or shorter than {@code param}, it is first extended
	// to the length of {@code param} with zero bytes.  If {@code param} is shorter
	// than the existing value in the database, the existing value is truncated to
	// match the length of {@code param}. The larger of the two values is then stored
	// in the database.
	MutationType_MAX MutationType = 5
	// Performs a little-endian comparison of byte strings. If the existing value in
	// the database is not present, then {@code param} is stored in the database. If
	// the existing value in the database is shorter than {@code param}, it is first
	// extended to the length of {@code param} with zero bytes.  If {@code param} is
	// shorter than the existing value in the database, the existing value is
	// truncated to match the length of {@code param}. The smaller of the two values
	// is then stored in the database.
	MutationType_MIN MutationType = 6
	// Transforms {@code key} using a versionstamp for the transaction. Sets the
	// transformed key in the database to {@code param}. The key is transformed by
	// removing the final four bytes from the key and reading those as a little-Endian
	// 32-bit integer to get a position {@code pos}. The 10 bytes of the key from
	// {@code pos} to {@code pos + 10} are replaced with the versionstamp of the
	// transaction used. The first byte of the key is position 0. A versionstamp is
	// a 10 byte, unique, monotonically (but not sequentially) increasing value for
	// each committed transaction. The first 8 bytes are the committed version of
	// the database (serialized in big-Endian order). The last 2 bytes are monotonic
	// in the serialization order for transactions.
	MutationType_SET_VERSIONSTAMPED_KEY MutationType = 7
	// Transforms {@code param} using a versionstamp for the transaction. Sets the
	// {@code key} given to the transformed {@code param}. The parameter is transformed
	// by removing the final four bytes from {@code param} and reading those as a
	// little-Endian 32-bit integer to get a position {@code pos}. The 10 bytes of
	// the parameter from {@code pos} to {@code pos + 10} are replaced with the
	// versionstamp of the transaction used. The first byte of the parameter is position
	// 0. A versionstamp is a 10 byte, unique, monotonically (but not sequentially)
	// increasing value for each committed transaction. The first 8 bytes are the
	// committed version of the database (serialized in big-Endian order). The last
	// 2 bytes are monotonic in the serialization order for transactions.
	MutationType_SET_VERSIONSTAMPED_VALUE MutationType = 8
	// Performs lexicographic comparison of byte strings. If the existing value in the
	// database is not present, then {@code param} is stored. Otherwise the smaller of
	// the two values is then stored in the database.
	MutationType_BYTE_MIN MutationType = 9
	// Performs lexicographic comparison of byte strings. If the existing value in the
	// database is not present, then {@code param} is stored. Otherwise the larger of
	// the two values is then stored in the database.
	MutationType_BYTE_MAX MutationType = 10
	// Performs an atomic {@code compare and clear} operation. If the existing value in
	// the database is equal to the given value, then given key is cleared.
	MutationType_COMPARE_AND_CLEAR MutationType = 11
)

// Enum value maps for MutationType.
var (
	MutationType_name = map[int32]string{
		0:  "ADD",
		1:  "BIT_AND",
		2:  "BIT_OR",
		3:  "BIT_XOR",
		4:  "APPEND_IF_FITS",
		5:  "MAX",
		6:  "MIN",
		7:  "SET_VERSIONSTAMPED_KEY",
		8:  "SET_VERSIONSTAMPED_VALUE",
		9:  "BYTE_MIN",
		10: "BYTE_MAX",
		11: "COMPARE_AND_CLEAR",
	}
	MutationType_value = map[string]int32{
		"ADD":                      0,
		"BIT_AND":                  1,
		"BIT_OR":                   2,
		"BIT_XOR":                  3,
		"APPEND_IF_FITS":           4,
		"MAX":                      5,
		"MIN":                      6,
		"SET_VERSIONSTAMPED_KEY":   7,
		"SET_VERSIONSTAMPED_VALUE": 8,
		"BYTE_MIN":                 9,
		"BYTE_MAX":                 10,
		"COMPARE_AND_CLEAR":        11,
	}
)

func (x MutationType) Enum() *MutationType {
	p := new(MutationType)
	*p = x
	return p
}

func (x MutationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutationType) Descriptor() protoreflect.EnumDescriptor {
	return file_lionrock_proto_enumTypes[1].Descriptor()
}

func (MutationType) Type() protoreflect.EnumType {
	return &file_lionrock_proto_enumTypes[1]
}

func (x MutationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MutationType.Descriptor instead.
func (MutationType) EnumDescriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{1}
}

// The request message from a client to a database to execute a single operation.
type DatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClientIdentifier string `protobuf:"bytes,2,opt,name=client_identifier,json=clientIdentifier,proto3" json:"client_identifier,omitempty"`
	DatabaseName     string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// set the read version to use. infrequently used.
	ReadVersion int64 `protobuf:"varint,4,opt,name=read_version,json=readVersion,proto3" json:"read_version,omitempty"`
	// transaction options to set. implementation specific.
	TransactionOptions []*SetTransactionOptionRequest `protobuf:"bytes,5,rep,name=transaction_options,json=transactionOptions,proto3" json:"transaction_options,omitempty"`
	// Types that are assignable to Request:
	//	*DatabaseRequest_GetValue
	//	*DatabaseRequest_GetRange
	//	*DatabaseRequest_SetValue
	//	*DatabaseRequest_ClearKey
	//	*DatabaseRequest_ClearRange
	//	*DatabaseRequest_MutateValue
	//	*DatabaseRequest_GetKey
	//	*DatabaseRequest_GetEstimatedRangeSize
	//	*DatabaseRequest_GetBoundaryKeys
	//	*DatabaseRequest_GetAddressesForKey
	Request isDatabaseRequest_Request `protobuf_oneof:"request"`
}

func (x *DatabaseRequest) Reset() {
	*x = DatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRequest) ProtoMessage() {}

func (x *DatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRequest.ProtoReflect.Descriptor instead.
func (*DatabaseRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseRequest) GetClientIdentifier() string {
	if x != nil {
		return x.ClientIdentifier
	}
	return ""
}

func (x *DatabaseRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *DatabaseRequest) GetReadVersion() int64 {
	if x != nil {
		return x.ReadVersion
	}
	return 0
}

func (x *DatabaseRequest) GetTransactionOptions() []*SetTransactionOptionRequest {
	if x != nil {
		return x.TransactionOptions
	}
	return nil
}

func (m *DatabaseRequest) GetRequest() isDatabaseRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DatabaseRequest) GetGetValue() *GetValueRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetValue); ok {
		return x.GetValue
	}
	return nil
}

func (x *DatabaseRequest) GetGetRange() *GetRangeRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetRange); ok {
		return x.GetRange
	}
	return nil
}

func (x *DatabaseRequest) GetSetValue() *SetValueRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_SetValue); ok {
		return x.SetValue
	}
	return nil
}

func (x *DatabaseRequest) GetClearKey() *ClearKeyRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_ClearKey); ok {
		return x.ClearKey
	}
	return nil
}

func (x *DatabaseRequest) GetClearRange() *ClearKeyRangeRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_ClearRange); ok {
		return x.ClearRange
	}
	return nil
}

func (x *DatabaseRequest) GetMutateValue() *MutateValueRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_MutateValue); ok {
		return x.MutateValue
	}
	return nil
}

func (x *DatabaseRequest) GetGetKey() *GetKeyRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *DatabaseRequest) GetGetEstimatedRangeSize() *GetEstimatedRangeSizeRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetEstimatedRangeSize); ok {
		return x.GetEstimatedRangeSize
	}
	return nil
}

func (x *DatabaseRequest) GetGetBoundaryKeys() *GetBoundaryKeysRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetBoundaryKeys); ok {
		return x.GetBoundaryKeys
	}
	return nil
}

func (x *DatabaseRequest) GetGetAddressesForKey() *GetAddressesForKeyRequest {
	if x, ok := x.GetRequest().(*DatabaseRequest_GetAddressesForKey); ok {
		return x.GetAddressesForKey
	}
	return nil
}

type isDatabaseRequest_Request interface {
	isDatabaseRequest_Request()
}

type DatabaseRequest_GetValue struct {
	GetValue *GetValueRequest `protobuf:"bytes,6,opt,name=get_value,json=getValue,proto3,oneof"`
}

type DatabaseRequest_GetRange struct {
	GetRange *GetRangeRequest `protobuf:"bytes,7,opt,name=get_range,json=getRange,proto3,oneof"`
}

type DatabaseRequest_SetValue struct {
	SetValue *SetValueRequest `protobuf:"bytes,8,opt,name=set_value,json=setValue,proto3,oneof"`
}

type DatabaseRequest_ClearKey struct {
	ClearKey *ClearKeyRequest `protobuf:"bytes,9,opt,name=clear_key,json=clearKey,proto3,oneof"`
}

type DatabaseRequest_ClearRange struct {
	ClearRange *ClearKeyRangeRequest `protobuf:"bytes,10,opt,name=clear_range,json=clearRange,proto3,oneof"`
}

type DatabaseRequest_MutateValue struct {
	MutateValue *MutateValueRequest `protobuf:"bytes,11,opt,name=mutate_value,json=mutateValue,proto3,oneof"`
}

type DatabaseRequest_GetKey struct {
	GetKey *GetKeyRequest `protobuf:"bytes,12,opt,name=get_key,json=getKey,proto3,oneof"`
}

type DatabaseRequest_GetEstimatedRangeSize struct {
	GetEstimatedRangeSize *GetEstimatedRangeSizeRequest `protobuf:"bytes,13,opt,name=get_estimated_range_size,json=getEstimatedRangeSize,proto3,oneof"`
}

type DatabaseRequest_GetBoundaryKeys struct {
	GetBoundaryKeys *GetBoundaryKeysRequest `protobuf:"bytes,14,opt,name=get_boundary_keys,json=getBoundaryKeys,proto3,oneof"`
}

type DatabaseRequest_GetAddressesForKey struct {
	GetAddressesForKey *GetAddressesForKeyRequest `protobuf:"bytes,15,opt,name=get_addresses_for_key,json=getAddressesForKey,proto3,oneof"`
}

func (*DatabaseRequest_GetValue) isDatabaseRequest_Request() {}

func (*DatabaseRequest_GetRange) isDatabaseRequest_Request() {}

func (*DatabaseRequest_SetValue) isDatabaseRequest_Request() {}

func (*DatabaseRequest_ClearKey) isDatabaseRequest_Request() {}

func (*DatabaseRequest_ClearRange) isDatabaseRequest_Request() {}

func (*DatabaseRequest_MutateValue) isDatabaseRequest_Request() {}

func (*DatabaseRequest_GetKey) isDatabaseRequest_Request() {}

func (*DatabaseRequest_GetEstimatedRangeSize) isDatabaseRequest_Request() {}

func (*DatabaseRequest_GetBoundaryKeys) isDatabaseRequest_Request() {}

func (*DatabaseRequest_GetAddressesForKey) isDatabaseRequest_Request() {}

// The response message from the database.
type DatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response from the original request.
	//
	// Types that are assignable to Response:
	//	*DatabaseResponse_GetValue
	//	*DatabaseResponse_GetRange
	//	*DatabaseResponse_GetKey
	//	*DatabaseResponse_CommittedTransaction
	//	*DatabaseResponse_GetEstimatedRangeSize
	//	*DatabaseResponse_GetBoundaryKeys
	//	*DatabaseResponse_GetAddresssesForKey
	Response isDatabaseResponse_Response `protobuf_oneof:"response"`
}

func (x *DatabaseResponse) Reset() {
	*x = DatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseResponse) ProtoMessage() {}

func (x *DatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseResponse.ProtoReflect.Descriptor instead.
func (*DatabaseResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{1}
}

func (m *DatabaseResponse) GetResponse() isDatabaseResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DatabaseResponse) GetGetValue() *GetValueResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetValue); ok {
		return x.GetValue
	}
	return nil
}

func (x *DatabaseResponse) GetGetRange() *GetRangeResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetRange); ok {
		return x.GetRange
	}
	return nil
}

func (x *DatabaseResponse) GetGetKey() *GetKeyResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *DatabaseResponse) GetCommittedTransaction() *CommitTransactionResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_CommittedTransaction); ok {
		return x.CommittedTransaction
	}
	return nil
}

func (x *DatabaseResponse) GetGetEstimatedRangeSize() *GetEstimatedRangeSizeResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetEstimatedRangeSize); ok {
		return x.GetEstimatedRangeSize
	}
	return nil
}

func (x *DatabaseResponse) GetGetBoundaryKeys() *GetBoundaryKeysResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetBoundaryKeys); ok {
		return x.GetBoundaryKeys
	}
	return nil
}

func (x *DatabaseResponse) GetGetAddresssesForKey() *GetAddressesForKeyResponse {
	if x, ok := x.GetResponse().(*DatabaseResponse_GetAddresssesForKey); ok {
		return x.GetAddresssesForKey
	}
	return nil
}

type isDatabaseResponse_Response interface {
	isDatabaseResponse_Response()
}

type DatabaseResponse_GetValue struct {
	GetValue *GetValueResponse `protobuf:"bytes,1,opt,name=get_value,json=getValue,proto3,oneof"`
}

type DatabaseResponse_GetRange struct {
	GetRange *GetRangeResponse `protobuf:"bytes,2,opt,name=get_range,json=getRange,proto3,oneof"`
}

type DatabaseResponse_GetKey struct {
	GetKey *GetKeyResponse `protobuf:"bytes,3,opt,name=get_key,json=getKey,proto3,oneof"`
}

type DatabaseResponse_CommittedTransaction struct {
	CommittedTransaction *CommitTransactionResponse `protobuf:"bytes,4,opt,name=committed_transaction,json=committedTransaction,proto3,oneof"`
}

type DatabaseResponse_GetEstimatedRangeSize struct {
	GetEstimatedRangeSize *GetEstimatedRangeSizeResponse `protobuf:"bytes,5,opt,name=get_estimated_range_size,json=getEstimatedRangeSize,proto3,oneof"`
}

type DatabaseResponse_GetBoundaryKeys struct {
	GetBoundaryKeys *GetBoundaryKeysResponse `protobuf:"bytes,6,opt,name=get_boundary_keys,json=getBoundaryKeys,proto3,oneof"`
}

type DatabaseResponse_GetAddresssesForKey struct {
	GetAddresssesForKey *GetAddressesForKeyResponse `protobuf:"bytes,7,opt,name=get_addressses_for_key,json=getAddresssesForKey,proto3,oneof"`
}

func (*DatabaseResponse_GetValue) isDatabaseResponse_Response() {}

func (*DatabaseResponse_GetRange) isDatabaseResponse_Response() {}

func (*DatabaseResponse_GetKey) isDatabaseResponse_Response() {}

func (*DatabaseResponse_CommittedTransaction) isDatabaseResponse_Response() {}

func (*DatabaseResponse_GetEstimatedRangeSize) isDatabaseResponse_Response() {}

func (*DatabaseResponse_GetBoundaryKeys) isDatabaseResponse_Response() {}

func (*DatabaseResponse_GetAddresssesForKey) isDatabaseResponse_Response() {}

// The request message from a client to a database when streaming.
type StreamingDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*StreamingDatabaseRequest_StartTransaction
	//	*StreamingDatabaseRequest_CommitTransaction
	//	*StreamingDatabaseRequest_GetValue
	//	*StreamingDatabaseRequest_SetValue
	//	*StreamingDatabaseRequest_ClearKey
	//	*StreamingDatabaseRequest_ClearRange
	//	*StreamingDatabaseRequest_GetRange
	//	*StreamingDatabaseRequest_AddConflictKey
	//	*StreamingDatabaseRequest_AddConflictRange
	//	*StreamingDatabaseRequest_GetReadVersion
	//	*StreamingDatabaseRequest_SetReadVersion
	//	*StreamingDatabaseRequest_SetTransactionOption
	//	*StreamingDatabaseRequest_MutateValue
	//	*StreamingDatabaseRequest_WatchKey
	//	*StreamingDatabaseRequest_GetApproximateSize
	//	*StreamingDatabaseRequest_GetKey
	//	*StreamingDatabaseRequest_GetEstimatedRangeSize
	//	*StreamingDatabaseRequest_GetBoundaryKeys
	//	*StreamingDatabaseRequest_GetAddressesForKey
	//	*StreamingDatabaseRequest_BatchedMutations
	Request isStreamingDatabaseRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingDatabaseRequest) Reset() {
	*x = StreamingDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingDatabaseRequest) ProtoMessage() {}

func (x *StreamingDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingDatabaseRequest.ProtoReflect.Descriptor instead.
func (*StreamingDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{2}
}

func (m *StreamingDatabaseRequest) GetRequest() isStreamingDatabaseRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetStartTransaction() *StartTransactionRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_StartTransaction); ok {
		return x.StartTransaction
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetCommitTransaction() *CommitTransactionRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_CommitTransaction); ok {
		return x.CommitTransaction
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetValue() *GetValueRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetValue); ok {
		return x.GetValue
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetSetValue() *SetValueRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_SetValue); ok {
		return x.SetValue
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetClearKey() *ClearKeyRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_ClearKey); ok {
		return x.ClearKey
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetClearRange() *ClearKeyRangeRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_ClearRange); ok {
		return x.ClearRange
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetRange() *GetRangeRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetRange); ok {
		return x.GetRange
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetAddConflictKey() *AddConflictKeyRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_AddConflictKey); ok {
		return x.AddConflictKey
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetAddConflictRange() *AddConflictRangeRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_AddConflictRange); ok {
		return x.AddConflictRange
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetReadVersion() *GetReadVersionRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetReadVersion); ok {
		return x.GetReadVersion
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetSetReadVersion() *SetReadVersionRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_SetReadVersion); ok {
		return x.SetReadVersion
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetSetTransactionOption() *SetTransactionOptionRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_SetTransactionOption); ok {
		return x.SetTransactionOption
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetMutateValue() *MutateValueRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_MutateValue); ok {
		return x.MutateValue
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetWatchKey() *WatchKeyRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_WatchKey); ok {
		return x.WatchKey
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetApproximateSize() *GetApproximateSizeRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetApproximateSize); ok {
		return x.GetApproximateSize
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetKey() *GetKeyRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetEstimatedRangeSize() *GetEstimatedRangeSizeRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetEstimatedRangeSize); ok {
		return x.GetEstimatedRangeSize
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetBoundaryKeys() *GetBoundaryKeysRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetBoundaryKeys); ok {
		return x.GetBoundaryKeys
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetGetAddressesForKey() *GetAddressesForKeyRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_GetAddressesForKey); ok {
		return x.GetAddressesForKey
	}
	return nil
}

func (x *StreamingDatabaseRequest) GetBatchedMutations() *BatchedMutationsRequest {
	if x, ok := x.GetRequest().(*StreamingDatabaseRequest_BatchedMutations); ok {
		return x.BatchedMutations
	}
	return nil
}

type isStreamingDatabaseRequest_Request interface {
	isStreamingDatabaseRequest_Request()
}

type StreamingDatabaseRequest_StartTransaction struct {
	StartTransaction *StartTransactionRequest `protobuf:"bytes,1,opt,name=start_transaction,json=startTransaction,proto3,oneof"`
}

type StreamingDatabaseRequest_CommitTransaction struct {
	CommitTransaction *CommitTransactionRequest `protobuf:"bytes,2,opt,name=commit_transaction,json=commitTransaction,proto3,oneof"`
}

type StreamingDatabaseRequest_GetValue struct {
	GetValue *GetValueRequest `protobuf:"bytes,3,opt,name=get_value,json=getValue,proto3,oneof"`
}

type StreamingDatabaseRequest_SetValue struct {
	SetValue *SetValueRequest `protobuf:"bytes,4,opt,name=set_value,json=setValue,proto3,oneof"`
}

type StreamingDatabaseRequest_ClearKey struct {
	ClearKey *ClearKeyRequest `protobuf:"bytes,5,opt,name=clear_key,json=clearKey,proto3,oneof"`
}

type StreamingDatabaseRequest_ClearRange struct {
	ClearRange *ClearKeyRangeRequest `protobuf:"bytes,6,opt,name=clear_range,json=clearRange,proto3,oneof"`
}

type StreamingDatabaseRequest_GetRange struct {
	GetRange *GetRangeRequest `protobuf:"bytes,7,opt,name=get_range,json=getRange,proto3,oneof"`
}

type StreamingDatabaseRequest_AddConflictKey struct {
	AddConflictKey *AddConflictKeyRequest `protobuf:"bytes,8,opt,name=add_conflict_key,json=addConflictKey,proto3,oneof"`
}

type StreamingDatabaseRequest_AddConflictRange struct {
	AddConflictRange *AddConflictRangeRequest `protobuf:"bytes,9,opt,name=add_conflict_range,json=addConflictRange,proto3,oneof"`
}

type StreamingDatabaseRequest_GetReadVersion struct {
	GetReadVersion *GetReadVersionRequest `protobuf:"bytes,10,opt,name=get_read_version,json=getReadVersion,proto3,oneof"`
}

type StreamingDatabaseRequest_SetReadVersion struct {
	SetReadVersion *SetReadVersionRequest `protobuf:"bytes,11,opt,name=set_read_version,json=setReadVersion,proto3,oneof"`
}

type StreamingDatabaseRequest_SetTransactionOption struct {
	SetTransactionOption *SetTransactionOptionRequest `protobuf:"bytes,12,opt,name=set_transaction_option,json=setTransactionOption,proto3,oneof"`
}

type StreamingDatabaseRequest_MutateValue struct {
	MutateValue *MutateValueRequest `protobuf:"bytes,13,opt,name=mutate_value,json=mutateValue,proto3,oneof"`
}

type StreamingDatabaseRequest_WatchKey struct {
	WatchKey *WatchKeyRequest `protobuf:"bytes,15,opt,name=watch_key,json=watchKey,proto3,oneof"`
}

type StreamingDatabaseRequest_GetApproximateSize struct {
	GetApproximateSize *GetApproximateSizeRequest `protobuf:"bytes,16,opt,name=get_approximate_size,json=getApproximateSize,proto3,oneof"`
}

type StreamingDatabaseRequest_GetKey struct {
	GetKey *GetKeyRequest `protobuf:"bytes,17,opt,name=get_key,json=getKey,proto3,oneof"`
}

type StreamingDatabaseRequest_GetEstimatedRangeSize struct {
	GetEstimatedRangeSize *GetEstimatedRangeSizeRequest `protobuf:"bytes,18,opt,name=get_estimated_range_size,json=getEstimatedRangeSize,proto3,oneof"`
}

type StreamingDatabaseRequest_GetBoundaryKeys struct {
	GetBoundaryKeys *GetBoundaryKeysRequest `protobuf:"bytes,19,opt,name=get_boundary_keys,json=getBoundaryKeys,proto3,oneof"`
}

type StreamingDatabaseRequest_GetAddressesForKey struct {
	GetAddressesForKey *GetAddressesForKeyRequest `protobuf:"bytes,20,opt,name=get_addresses_for_key,json=getAddressesForKey,proto3,oneof"`
}

type StreamingDatabaseRequest_BatchedMutations struct {
	BatchedMutations *BatchedMutationsRequest `protobuf:"bytes,21,opt,name=batched_mutations,json=batchedMutations,proto3,oneof"`
}

func (*StreamingDatabaseRequest_StartTransaction) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_CommitTransaction) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetValue) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_SetValue) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_ClearKey) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_ClearRange) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetRange) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_AddConflictKey) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_AddConflictRange) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetReadVersion) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_SetReadVersion) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_SetTransactionOption) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_MutateValue) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_WatchKey) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetApproximateSize) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetKey) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetEstimatedRangeSize) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetBoundaryKeys) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_GetAddressesForKey) isStreamingDatabaseRequest_Request() {}

func (*StreamingDatabaseRequest_BatchedMutations) isStreamingDatabaseRequest_Request() {}

// A batched collected of mutations.
type BatchedMutations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mutation:
	//	*BatchedMutations_SetValue
	//	*BatchedMutations_ClearKey
	//	*BatchedMutations_ClearRange
	//	*BatchedMutations_AddConflictKey
	//	*BatchedMutations_AddConflictRange
	//	*BatchedMutations_MutateValue
	Mutation isBatchedMutations_Mutation `protobuf_oneof:"mutation"`
}

func (x *BatchedMutations) Reset() {
	*x = BatchedMutations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchedMutations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchedMutations) ProtoMessage() {}

func (x *BatchedMutations) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchedMutations.ProtoReflect.Descriptor instead.
func (*BatchedMutations) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{3}
}

func (m *BatchedMutations) GetMutation() isBatchedMutations_Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (x *BatchedMutations) GetSetValue() *SetValueRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_SetValue); ok {
		return x.SetValue
	}
	return nil
}

func (x *BatchedMutations) GetClearKey() *ClearKeyRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_ClearKey); ok {
		return x.ClearKey
	}
	return nil
}

func (x *BatchedMutations) GetClearRange() *ClearKeyRangeRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_ClearRange); ok {
		return x.ClearRange
	}
	return nil
}

func (x *BatchedMutations) GetAddConflictKey() *AddConflictKeyRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_AddConflictKey); ok {
		return x.AddConflictKey
	}
	return nil
}

func (x *BatchedMutations) GetAddConflictRange() *AddConflictRangeRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_AddConflictRange); ok {
		return x.AddConflictRange
	}
	return nil
}

func (x *BatchedMutations) GetMutateValue() *MutateValueRequest {
	if x, ok := x.GetMutation().(*BatchedMutations_MutateValue); ok {
		return x.MutateValue
	}
	return nil
}

type isBatchedMutations_Mutation interface {
	isBatchedMutations_Mutation()
}

type BatchedMutations_SetValue struct {
	SetValue *SetValueRequest `protobuf:"bytes,1,opt,name=set_value,json=setValue,proto3,oneof"`
}

type BatchedMutations_ClearKey struct {
	ClearKey *ClearKeyRequest `protobuf:"bytes,2,opt,name=clear_key,json=clearKey,proto3,oneof"`
}

type BatchedMutations_ClearRange struct {
	ClearRange *ClearKeyRangeRequest `protobuf:"bytes,3,opt,name=clear_range,json=clearRange,proto3,oneof"`
}

type BatchedMutations_AddConflictKey struct {
	AddConflictKey *AddConflictKeyRequest `protobuf:"bytes,4,opt,name=add_conflict_key,json=addConflictKey,proto3,oneof"`
}

type BatchedMutations_AddConflictRange struct {
	AddConflictRange *AddConflictRangeRequest `protobuf:"bytes,5,opt,name=add_conflict_range,json=addConflictRange,proto3,oneof"`
}

type BatchedMutations_MutateValue struct {
	MutateValue *MutateValueRequest `protobuf:"bytes,6,opt,name=mutate_value,json=mutateValue,proto3,oneof"`
}

func (*BatchedMutations_SetValue) isBatchedMutations_Mutation() {}

func (*BatchedMutations_ClearKey) isBatchedMutations_Mutation() {}

func (*BatchedMutations_ClearRange) isBatchedMutations_Mutation() {}

func (*BatchedMutations_AddConflictKey) isBatchedMutations_Mutation() {}

func (*BatchedMutations_AddConflictRange) isBatchedMutations_Mutation() {}

func (*BatchedMutations_MutateValue) isBatchedMutations_Mutation() {}

// The response message from a client to a database when streaming.
type StreamingDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*StreamingDatabaseResponse_CommitTransaction
	//	*StreamingDatabaseResponse_OperationFailure
	//	*StreamingDatabaseResponse_GetValue
	//	*StreamingDatabaseResponse_GetRange
	//	*StreamingDatabaseResponse_GetReadVersion
	//	*StreamingDatabaseResponse_WatchKey
	//	*StreamingDatabaseResponse_GetApproximateSize
	//	*StreamingDatabaseResponse_GetKey
	//	*StreamingDatabaseResponse_GetEstimatedRangeSize
	//	*StreamingDatabaseResponse_GetBoundaryKeys
	//	*StreamingDatabaseResponse_GetAddressesForKey
	Response isStreamingDatabaseResponse_Response `protobuf_oneof:"response"`
}

func (x *StreamingDatabaseResponse) Reset() {
	*x = StreamingDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingDatabaseResponse) ProtoMessage() {}

func (x *StreamingDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingDatabaseResponse.ProtoReflect.Descriptor instead.
func (*StreamingDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingDatabaseResponse) GetResponse() isStreamingDatabaseResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetCommitTransaction() *CommitTransactionResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_CommitTransaction); ok {
		return x.CommitTransaction
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetOperationFailure() *OperationFailureResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_OperationFailure); ok {
		return x.OperationFailure
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetValue() *GetValueResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetValue); ok {
		return x.GetValue
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetRange() *GetRangeResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetRange); ok {
		return x.GetRange
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetReadVersion() *GetReadVersionResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetReadVersion); ok {
		return x.GetReadVersion
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetWatchKey() *WatchKeyResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_WatchKey); ok {
		return x.WatchKey
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetApproximateSize() *GetApproximateSizeResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetApproximateSize); ok {
		return x.GetApproximateSize
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetKey() *GetKeyResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetEstimatedRangeSize() *GetEstimatedRangeSizeResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetEstimatedRangeSize); ok {
		return x.GetEstimatedRangeSize
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetBoundaryKeys() *GetBoundaryKeysResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetBoundaryKeys); ok {
		return x.GetBoundaryKeys
	}
	return nil
}

func (x *StreamingDatabaseResponse) GetGetAddressesForKey() *GetAddressesForKeyResponse {
	if x, ok := x.GetResponse().(*StreamingDatabaseResponse_GetAddressesForKey); ok {
		return x.GetAddressesForKey
	}
	return nil
}

type isStreamingDatabaseResponse_Response interface {
	isStreamingDatabaseResponse_Response()
}

type StreamingDatabaseResponse_CommitTransaction struct {
	CommitTransaction *CommitTransactionResponse `protobuf:"bytes,1,opt,name=commit_transaction,json=commitTransaction,proto3,oneof"`
}

type StreamingDatabaseResponse_OperationFailure struct {
	OperationFailure *OperationFailureResponse `protobuf:"bytes,2,opt,name=operation_failure,json=operationFailure,proto3,oneof"`
}

type StreamingDatabaseResponse_GetValue struct {
	GetValue *GetValueResponse `protobuf:"bytes,3,opt,name=get_value,json=getValue,proto3,oneof"`
}

type StreamingDatabaseResponse_GetRange struct {
	GetRange *GetRangeResponse `protobuf:"bytes,4,opt,name=get_range,json=getRange,proto3,oneof"`
}

type StreamingDatabaseResponse_GetReadVersion struct {
	GetReadVersion *GetReadVersionResponse `protobuf:"bytes,5,opt,name=get_read_version,json=getReadVersion,proto3,oneof"`
}

type StreamingDatabaseResponse_WatchKey struct {
	WatchKey *WatchKeyResponse `protobuf:"bytes,7,opt,name=watch_key,json=watchKey,proto3,oneof"`
}

type StreamingDatabaseResponse_GetApproximateSize struct {
	GetApproximateSize *GetApproximateSizeResponse `protobuf:"bytes,8,opt,name=get_approximate_size,json=getApproximateSize,proto3,oneof"`
}

type StreamingDatabaseResponse_GetKey struct {
	GetKey *GetKeyResponse `protobuf:"bytes,9,opt,name=get_key,json=getKey,proto3,oneof"`
}

type StreamingDatabaseResponse_GetEstimatedRangeSize struct {
	GetEstimatedRangeSize *GetEstimatedRangeSizeResponse `protobuf:"bytes,10,opt,name=get_estimated_range_size,json=getEstimatedRangeSize,proto3,oneof"`
}

type StreamingDatabaseResponse_GetBoundaryKeys struct {
	GetBoundaryKeys *GetBoundaryKeysResponse `protobuf:"bytes,11,opt,name=get_boundary_keys,json=getBoundaryKeys,proto3,oneof"`
}

type StreamingDatabaseResponse_GetAddressesForKey struct {
	GetAddressesForKey *GetAddressesForKeyResponse `protobuf:"bytes,12,opt,name=get_addresses_for_key,json=getAddressesForKey,proto3,oneof"`
}

func (*StreamingDatabaseResponse_CommitTransaction) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_OperationFailure) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetValue) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetRange) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetReadVersion) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_WatchKey) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetApproximateSize) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetKey) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetEstimatedRangeSize) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetBoundaryKeys) isStreamingDatabaseResponse_Response() {}

func (*StreamingDatabaseResponse_GetAddressesForKey) isStreamingDatabaseResponse_Response() {}

// The request message to start a transaction.
type StartTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClientIdentifier string `protobuf:"bytes,2,opt,name=client_identifier,json=clientIdentifier,proto3" json:"client_identifier,omitempty"`
	DatabaseName     string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *StartTransactionRequest) Reset() {
	*x = StartTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionRequest) ProtoMessage() {}

func (x *StartTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionRequest.ProtoReflect.Descriptor instead.
func (*StartTransactionRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{5}
}

func (x *StartTransactionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartTransactionRequest) GetClientIdentifier() string {
	if x != nil {
		return x.ClientIdentifier
	}
	return ""
}

func (x *StartTransactionRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

// The request to commit the ongoing transaction.
type CommitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitTransactionRequest) Reset() {
	*x = CommitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransactionRequest) ProtoMessage() {}

func (x *CommitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransactionRequest.ProtoReflect.Descriptor instead.
func (*CommitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{6}
}

// The last response of a transaction request. Indicates successfully committing the transaction.
type CommitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommittedVersion int64 `protobuf:"varint,1,opt,name=committed_version,json=committedVersion,proto3" json:"committed_version,omitempty"`
	// The versionstamp after a commit. not available for read-only transactions.
	Versionstamp []byte `protobuf:"bytes,2,opt,name=versionstamp,proto3" json:"versionstamp,omitempty"`
}

func (x *CommitTransactionResponse) Reset() {
	*x = CommitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransactionResponse) ProtoMessage() {}

func (x *CommitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransactionResponse.ProtoReflect.Descriptor instead.
func (*CommitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{7}
}

func (x *CommitTransactionResponse) GetCommittedVersion() int64 {
	if x != nil {
		return x.CommittedVersion
	}
	return 0
}

func (x *CommitTransactionResponse) GetVersionstamp() []byte {
	if x != nil {
		return x.Versionstamp
	}
	return nil
}

// The request to get the value of a single key.
type GetValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId int64  `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Key        []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// whether to do a snapshot get (instead of marking read rows with read conflict ranges).
	// only apply to streaming transactions.
	Snapshot bool `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetValueRequest) Reset() {
	*x = GetValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueRequest) ProtoMessage() {}

func (x *GetValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueRequest.ProtoReflect.Descriptor instead.
func (*GetValueRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{8}
}

func (x *GetValueRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetValueRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetValueRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

// The response for the value to a key.
type GetValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId int64  `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetValueResponse) Reset() {
	*x = GetValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueResponse) ProtoMessage() {}

func (x *GetValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueResponse.ProtoReflect.Descriptor instead.
func (*GetValueResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{9}
}

func (x *GetValueResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetValueResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The request to get a key by a key selector.
type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId  int64        `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	KeySelector *KeySelector `protobuf:"bytes,2,opt,name=keySelector,proto3" json:"keySelector,omitempty"`
	// whether to do a snapshot get (instead of marking read rows with read conflict ranges).
	// only apply to streaming transactions.
	Snapshot bool `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{10}
}

func (x *GetKeyRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetKeyRequest) GetKeySelector() *KeySelector {
	if x != nil {
		return x.KeySelector
	}
	return nil
}

func (x *GetKeyRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

// The response for the value to a key.
type GetKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceId int64  `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Key        []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetKeyResponse) Reset() {
	*x = GetKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResponse) ProtoMessage() {}

func (x *GetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResponse.ProtoReflect.Descriptor instead.
func (*GetKeyResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{11}
}

func (x *GetKeyResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetKeyResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// The request to get the value of a single key.
type SetValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetValueRequest) Reset() {
	*x = SetValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetValueRequest) ProtoMessage() {}

func (x *SetValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetValueRequest.ProtoReflect.Descriptor instead.
func (*SetValueRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{12}
}

func (x *SetValueRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SetValueRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The request to get the value of a single key.
type MutateValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type  MutationType `protobuf:"varint,2,opt,name=type,proto3,enum=MutationType" json:"type,omitempty"`
	Param []byte       `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *MutateValueRequest) Reset() {
	*x = MutateValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateValueRequest) ProtoMessage() {}

func (x *MutateValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateValueRequest.ProtoReflect.Descriptor instead.
func (*MutateValueRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{13}
}

func (x *MutateValueRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MutateValueRequest) GetType() MutationType {
	if x != nil {
		return x.Type
	}
	return MutationType_ADD
}

func (x *MutateValueRequest) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

// The request to delete a key.
type ClearKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ClearKeyRequest) Reset() {
	*x = ClearKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearKeyRequest) ProtoMessage() {}

func (x *ClearKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearKeyRequest.ProtoReflect.Descriptor instead.
func (*ClearKeyRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{14}
}

func (x *ClearKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// The request to delete a range of keys.
type ClearKeyRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start key inclusive
	Start []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// end key exclusive
	End []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ClearKeyRangeRequest) Reset() {
	*x = ClearKeyRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearKeyRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearKeyRangeRequest) ProtoMessage() {}

func (x *ClearKeyRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearKeyRangeRequest.ProtoReflect.Descriptor instead.
func (*ClearKeyRangeRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{15}
}

func (x *ClearKeyRangeRequest) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ClearKeyRangeRequest) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// Gets an ordered range of keys and values from the database.  The begin
// and end keys are specified by {@code byte[]} arrays, with the begin
// key inclusive and the end key exclusive.
type GetRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// the beginning of the range (inclusive).
	//
	// Types that are assignable to Start:
	//	*GetRangeRequest_StartKeySelector
	//	*GetRangeRequest_StartBytes
	Start isGetRangeRequest_Start `protobuf_oneof:"start"`
	// the end of the range (exclusive).
	//
	// Types that are assignable to End:
	//	*GetRangeRequest_EndKeySelector
	//	*GetRangeRequest_EndBytes
	End isGetRangeRequest_End `protobuf_oneof:"end"`
	// The maximum number of results to return. Limits results to the
	// <i>first</i> keys in the range. If {@code reverse} is {@code true} rows
	// will be limited starting at the end of the range.
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// return results starting at the end of the range in reverse order.
	Reverse bool `protobuf:"varint,7,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// provide a hint about how the results are to be used. This
	// can provide speed improvements or efficiency gains based on the caller's
	// knowledge of the upcoming access pattern.
	StreamingMode StreamingMode `protobuf:"varint,8,opt,name=streamingMode,proto3,enum=StreamingMode" json:"streamingMode,omitempty"`
	// whether to do a snapshot get (instead of marking read rows with read conflict ranges).
	// only apply to streaming transactions.
	Snapshot bool `protobuf:"varint,9,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetRangeRequest) Reset() {
	*x = GetRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRangeRequest) ProtoMessage() {}

func (x *GetRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRangeRequest.ProtoReflect.Descriptor instead.
func (*GetRangeRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{16}
}

func (x *GetRangeRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (m *GetRangeRequest) GetStart() isGetRangeRequest_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (x *GetRangeRequest) GetStartKeySelector() *KeySelector {
	if x, ok := x.GetStart().(*GetRangeRequest_StartKeySelector); ok {
		return x.StartKeySelector
	}
	return nil
}

func (x *GetRangeRequest) GetStartBytes() []byte {
	if x, ok := x.GetStart().(*GetRangeRequest_StartBytes); ok {
		return x.StartBytes
	}
	return nil
}

func (m *GetRangeRequest) GetEnd() isGetRangeRequest_End {
	if m != nil {
		return m.End
	}
	return nil
}

func (x *GetRangeRequest) GetEndKeySelector() *KeySelector {
	if x, ok := x.GetEnd().(*GetRangeRequest_EndKeySelector); ok {
		return x.EndKeySelector
	}
	return nil
}

func (x *GetRangeRequest) GetEndBytes() []byte {
	if x, ok := x.GetEnd().(*GetRangeRequest_EndBytes); ok {
		return x.EndBytes
	}
	return nil
}

func (x *GetRangeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRangeRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *GetRangeRequest) GetStreamingMode() StreamingMode {
	if x != nil {
		return x.StreamingMode
	}
	return StreamingMode_ITERATOR
}

func (x *GetRangeRequest) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

type isGetRangeRequest_Start interface {
	isGetRangeRequest_Start()
}

type GetRangeRequest_StartKeySelector struct {
	StartKeySelector *KeySelector `protobuf:"bytes,2,opt,name=startKeySelector,proto3,oneof"`
}

type GetRangeRequest_StartBytes struct {
	StartBytes []byte `protobuf:"bytes,3,opt,name=startBytes,proto3,oneof"`
}

func (*GetRangeRequest_StartKeySelector) isGetRangeRequest_Start() {}

func (*GetRangeRequest_StartBytes) isGetRangeRequest_Start() {}

type isGetRangeRequest_End interface {
	isGetRangeRequest_End()
}

type GetRangeRequest_EndKeySelector struct {
	EndKeySelector *KeySelector `protobuf:"bytes,4,opt,name=endKeySelector,proto3,oneof"`
}

type GetRangeRequest_EndBytes struct {
	EndBytes []byte `protobuf:"bytes,5,opt,name=endBytes,proto3,oneof"`
}

func (*GetRangeRequest_EndKeySelector) isGetRangeRequest_End() {}

func (*GetRangeRequest_EndBytes) isGetRangeRequest_End() {}

// The response (or a single batch of many) when getting a range of keys.
type GetRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64       `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	KeyValues  []*KeyValue `protobuf:"bytes,2,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
	Done       bool        `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *GetRangeResponse) Reset() {
	*x = GetRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRangeResponse) ProtoMessage() {}

func (x *GetRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRangeResponse.ProtoReflect.Descriptor instead.
func (*GetRangeResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{17}
}

func (x *GetRangeResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetRangeResponse) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

func (x *GetRangeResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

// A request to add a conflict key for determining what keys are involved in a transaction.
type AddConflictKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key to add as a conflict key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// if false (default), add a key to the transaction's read conflict ranges as if you had read
	// the key. As a result, other transactions that concurrently write this key
	// could cause the transaction to fail with a conflict.
	// if true, add a key to the transaction's write conflict ranges as if you had
	// written the key. As a result, other transactions that concurrently read
	// this key could fail with a conflict.
	Write bool `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
}

func (x *AddConflictKeyRequest) Reset() {
	*x = AddConflictKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConflictKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConflictKeyRequest) ProtoMessage() {}

func (x *AddConflictKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConflictKeyRequest.ProtoReflect.Descriptor instead.
func (*AddConflictKeyRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{18}
}

func (x *AddConflictKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddConflictKeyRequest) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

// A request to add a conflict range for determining what keys are involved in a transaction.
// Manages conflict ranges for determining what keys are involved in a transaction.
type AddConflictRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the start key (inclusive) to add as a conflict key.
	Start []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// the end (exclusive) to add as a conflict key.
	End []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// if false (default), add a range of keys to the transaction's read conflict ranges as if you
	// had read the range. As a result, other transactions that write a key in
	// this range could cause the transaction to fail with a conflict.
	// if true, add a key to the transaction's read conflict ranges as if you had read
	// the key. As a result, other transactions that concurrently write this key
	// could cause the transaction to fail with a conflict.
	Write bool `protobuf:"varint,3,opt,name=write,proto3" json:"write,omitempty"`
}

func (x *AddConflictRangeRequest) Reset() {
	*x = AddConflictRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConflictRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConflictRangeRequest) ProtoMessage() {}

func (x *AddConflictRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConflictRangeRequest.ProtoReflect.Descriptor instead.
func (*AddConflictRangeRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{19}
}

func (x *AddConflictRangeRequest) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AddConflictRangeRequest) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AddConflictRangeRequest) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

// A request to get the current read version.
type GetReadVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *GetReadVersionRequest) Reset() {
	*x = GetReadVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadVersionRequest) ProtoMessage() {}

func (x *GetReadVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadVersionRequest.ProtoReflect.Descriptor instead.
func (*GetReadVersionRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{20}
}

func (x *GetReadVersionRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// A response to getting the read version.
type GetReadVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId  int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	ReadVersion int64 `protobuf:"varint,2,opt,name=read_version,json=readVersion,proto3" json:"read_version,omitempty"`
}

func (x *GetReadVersionResponse) Reset() {
	*x = GetReadVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadVersionResponse) ProtoMessage() {}

func (x *GetReadVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadVersionResponse.ProtoReflect.Descriptor instead.
func (*GetReadVersionResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{21}
}

func (x *GetReadVersionResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetReadVersionResponse) GetReadVersion() int64 {
	if x != nil {
		return x.ReadVersion
	}
	return 0
}

// A request to set the read version to use for the transaction.
type SetReadVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadVersion int64 `protobuf:"varint,1,opt,name=read_version,json=readVersion,proto3" json:"read_version,omitempty"`
}

func (x *SetReadVersionRequest) Reset() {
	*x = SetReadVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadVersionRequest) ProtoMessage() {}

func (x *SetReadVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadVersionRequest.ProtoReflect.Descriptor instead.
func (*SetReadVersionRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{22}
}

func (x *SetReadVersionRequest) GetReadVersion() int64 {
	if x != nil {
		return x.ReadVersion
	}
	return 0
}

// A request to set transaction options. Implementation specific.
type SetTransactionOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option int32  `protobuf:"varint,1,opt,name=option,proto3" json:"option,omitempty"`
	Param  []byte `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SetTransactionOptionRequest) Reset() {
	*x = SetTransactionOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTransactionOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTransactionOptionRequest) ProtoMessage() {}

func (x *SetTransactionOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTransactionOptionRequest.ProtoReflect.Descriptor instead.
func (*SetTransactionOptionRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{23}
}

func (x *SetTransactionOptionRequest) GetOption() int32 {
	if x != nil {
		return x.Option
	}
	return 0
}

func (x *SetTransactionOptionRequest) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

// The request to watch a key for changes.
type WatchKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64  `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Key        []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *WatchKeyRequest) Reset() {
	*x = WatchKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchKeyRequest) ProtoMessage() {}

func (x *WatchKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchKeyRequest.ProtoReflect.Descriptor instead.
func (*WatchKeyRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{24}
}

func (x *WatchKeyRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *WatchKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// The response when a key changes after a transaction is committed.
type WatchKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *WatchKeyResponse) Reset() {
	*x = WatchKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchKeyResponse) ProtoMessage() {}

func (x *WatchKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchKeyResponse.ProtoReflect.Descriptor instead.
func (*WatchKeyResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{25}
}

func (x *WatchKeyResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// The request to get the approximate size of the transaction.
type GetApproximateSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *GetApproximateSizeRequest) Reset() {
	*x = GetApproximateSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApproximateSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApproximateSizeRequest) ProtoMessage() {}

func (x *GetApproximateSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApproximateSizeRequest.ProtoReflect.Descriptor instead.
func (*GetApproximateSizeRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{26}
}

func (x *GetApproximateSizeRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// The response to get the approximate size of the transaction.
type GetApproximateSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// the approximate size of the transaction.
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetApproximateSizeResponse) Reset() {
	*x = GetApproximateSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApproximateSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApproximateSizeResponse) ProtoMessage() {}

func (x *GetApproximateSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApproximateSizeResponse.ProtoReflect.Descriptor instead.
func (*GetApproximateSizeResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{27}
}

func (x *GetApproximateSizeResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetApproximateSizeResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// The request to get the approximate size of a range of keys.
type GetEstimatedRangeSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// the start key (inclusive) to add as a conflict key.
	Start []byte `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// the end (exclusive) to add as a conflict key.
	End []byte `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetEstimatedRangeSizeRequest) Reset() {
	*x = GetEstimatedRangeSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEstimatedRangeSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEstimatedRangeSizeRequest) ProtoMessage() {}

func (x *GetEstimatedRangeSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEstimatedRangeSizeRequest.ProtoReflect.Descriptor instead.
func (*GetEstimatedRangeSizeRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{28}
}

func (x *GetEstimatedRangeSizeRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetEstimatedRangeSizeRequest) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetEstimatedRangeSizeRequest) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// The response to get the approximate size of a range of keys
type GetEstimatedRangeSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// the approximate size of the range.
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetEstimatedRangeSizeResponse) Reset() {
	*x = GetEstimatedRangeSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEstimatedRangeSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEstimatedRangeSizeResponse) ProtoMessage() {}

func (x *GetEstimatedRangeSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEstimatedRangeSizeResponse.ProtoReflect.Descriptor instead.
func (*GetEstimatedRangeSizeResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{29}
}

func (x *GetEstimatedRangeSizeResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetEstimatedRangeSizeResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// The request to get boundary keys
type GetBoundaryKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// the beginning of the range (inclusive).
	Start []byte `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// the end of the range (exclusive).
	End []byte `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetBoundaryKeysRequest) Reset() {
	*x = GetBoundaryKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoundaryKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoundaryKeysRequest) ProtoMessage() {}

func (x *GetBoundaryKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoundaryKeysRequest.ProtoReflect.Descriptor instead.
func (*GetBoundaryKeysRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{30}
}

func (x *GetBoundaryKeysRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetBoundaryKeysRequest) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetBoundaryKeysRequest) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// The response to get boundary keys. A single batch of many.
type GetBoundaryKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64    `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Keys       [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Done       bool     `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *GetBoundaryKeysResponse) Reset() {
	*x = GetBoundaryKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoundaryKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoundaryKeysResponse) ProtoMessage() {}

func (x *GetBoundaryKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoundaryKeysResponse.ProtoReflect.Descriptor instead.
func (*GetBoundaryKeysResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{31}
}

func (x *GetBoundaryKeysResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetBoundaryKeysResponse) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetBoundaryKeysResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

// The request to get public network addresses as strings for a key.
type GetAddressesForKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// key
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetAddressesForKeyRequest) Reset() {
	*x = GetAddressesForKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesForKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesForKeyRequest) ProtoMessage() {}

func (x *GetAddressesForKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesForKeyRequest.ProtoReflect.Descriptor instead.
func (*GetAddressesForKeyRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{32}
}

func (x *GetAddressesForKeyRequest) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetAddressesForKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// The response to get boundary keys
type GetAddressesForKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64    `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Addresses  []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetAddressesForKeyResponse) Reset() {
	*x = GetAddressesForKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressesForKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressesForKeyResponse) ProtoMessage() {}

func (x *GetAddressesForKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressesForKeyResponse.ProtoReflect.Descriptor instead.
func (*GetAddressesForKeyResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{33}
}

func (x *GetAddressesForKeyResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GetAddressesForKeyResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// The request for batched mutations
type BatchedMutationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mutations batched.
	Mutations []*BatchedMutations `protobuf:"bytes,1,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (x *BatchedMutationsRequest) Reset() {
	*x = BatchedMutationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchedMutationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchedMutationsRequest) ProtoMessage() {}

func (x *BatchedMutationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchedMutationsRequest.ProtoReflect.Descriptor instead.
func (*BatchedMutationsRequest) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{34}
}

func (x *BatchedMutationsRequest) GetMutations() []*BatchedMutations {
	if x != nil {
		return x.Mutations
	}
	return nil
}

// The response that's streamed back when a single async operation fails.
type OperationFailureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In streaming use-cases, the sequence_id is used by the client to identify a
	// request and for the server to stream results back to that original request.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// error code (if available)
	Code int64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// error message (if available)
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OperationFailureResponse) Reset() {
	*x = OperationFailureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationFailureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationFailureResponse) ProtoMessage() {}

func (x *OperationFailureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationFailureResponse.ProtoReflect.Descriptor instead.
func (*OperationFailureResponse) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{35}
}

func (x *OperationFailureResponse) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *OperationFailureResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OperationFailureResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Key-Value Pair
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{36}
}

func (x *KeyValue) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Identifies a particular key in the database
type KeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the base key to reference
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// {@code true} if the key selector should resolve to
	// {@code key} (if {@code key} is present) before accounting for the offset
	OrEqual bool `protobuf:"varint,2,opt,name=orEqual,proto3" json:"orEqual,omitempty"`
	// the offset (in number of keys) that the selector will advance after
	// resolving to a key based on the {@code key} and {@code orEqual} parameters
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *KeySelector) Reset() {
	*x = KeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lionrock_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySelector) ProtoMessage() {}

func (x *KeySelector) ProtoReflect() protoreflect.Message {
	mi := &file_lionrock_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySelector.ProtoReflect.Descriptor instead.
func (*KeySelector) Descriptor() ([]byte, []int) {
	return file_lionrock_proto_rawDescGZIP(), []int{37}
}

func (x *KeySelector) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeySelector) GetOrEqual() bool {
	if x != nil {
		return x.OrEqual
	}
	return false
}

func (x *KeySelector) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

var File_lionrock_proto protoreflect.FileDescriptor

var file_lionrock_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x69, 0x6f, 0x6e, 0x72, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc9, 0x06, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x58, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x4f, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x03, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x0a, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x16, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x4e,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x18, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65,
	0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x82, 0x03, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x06, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x59, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7f, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x6c, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x60, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22,
	0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b,
	0x6b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x23, 0x0a, 0x0f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3e,
	0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xf8,
	0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x1b, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x44, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x10,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x3c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x51, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x67, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x54, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x69, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x51, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x2a, 0x36, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x02, 0x2a, 0xd0, 0x01, 0x0a, 0x0c,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x49, 0x54, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x46, 0x5f, 0x46, 0x49, 0x54, 0x53, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x59, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x59, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x0b, 0x32, 0x9d,
	0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2e,
	0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4d,
	0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x6e, 0x67,
	0x68, 0x79, 0x2e, 0x6c, 0x69, 0x6f, 0x6e, 0x72, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x6f, 0x72, 0x69, 0x62, 0x65, 0x6c, 0x6c, 0x61, 0x6d, 0x79, 0x2f, 0x76, 0x6f, 0x78, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lionrock_proto_rawDescOnce sync.Once
	file_lionrock_proto_rawDescData = file_lionrock_proto_rawDesc
)

func file_lionrock_proto_rawDescGZIP() []byte {
	file_lionrock_proto_rawDescOnce.Do(func() {
		file_lionrock_proto_rawDescData = protoimpl.X.CompressGZIP(file_lionrock_proto_rawDescData)
	})
	return file_lionrock_proto_rawDescData
}

var file_lionrock_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lionrock_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_lionrock_proto_goTypes = []interface{}{
	(StreamingMode)(0),                    // 0: StreamingMode
	(MutationType)(0),                     // 1: MutationType
	(*DatabaseRequest)(nil),               // 2: DatabaseRequest
	(*DatabaseResponse)(nil),              // 3: DatabaseResponse
	(*StreamingDatabaseRequest)(nil),      // 4: StreamingDatabaseRequest
	(*BatchedMutations)(nil),              // 5: BatchedMutations
	(*StreamingDatabaseResponse)(nil),     // 6: StreamingDatabaseResponse
	(*StartTransactionRequest)(nil),       // 7: StartTransactionRequest
	(*CommitTransactionRequest)(nil),      // 8: CommitTransactionRequest
	(*CommitTransactionResponse)(nil),     // 9: CommitTransactionResponse
	(*GetValueRequest)(nil),               // 10: GetValueRequest
	(*GetValueResponse)(nil),              // 11: GetValueResponse
	(*GetKeyRequest)(nil),                 // 12: GetKeyRequest
	(*GetKeyResponse)(nil),                // 13: GetKeyResponse
	(*SetValueRequest)(nil),               // 14: SetValueRequest
	(*MutateValueRequest)(nil),            // 15: MutateValueRequest
	(*ClearKeyRequest)(nil),               // 16: ClearKeyRequest
	(*ClearKeyRangeRequest)(nil),          // 17: ClearKeyRangeRequest
	(*GetRangeRequest)(nil),               // 18: GetRangeRequest
	(*GetRangeResponse)(nil),              // 19: GetRangeResponse
	(*AddConflictKeyRequest)(nil),         // 20: AddConflictKeyRequest
	(*AddConflictRangeRequest)(nil),       // 21: AddConflictRangeRequest
	(*GetReadVersionRequest)(nil),         // 22: GetReadVersionRequest
	(*GetReadVersionResponse)(nil),        // 23: GetReadVersionResponse
	(*SetReadVersionRequest)(nil),         // 24: SetReadVersionRequest
	(*SetTransactionOptionRequest)(nil),   // 25: SetTransactionOptionRequest
	(*WatchKeyRequest)(nil),               // 26: WatchKeyRequest
	(*WatchKeyResponse)(nil),              // 27: WatchKeyResponse
	(*GetApproximateSizeRequest)(nil),     // 28: GetApproximateSizeRequest
	(*GetApproximateSizeResponse)(nil),    // 29: GetApproximateSizeResponse
	(*GetEstimatedRangeSizeRequest)(nil),  // 30: GetEstimatedRangeSizeRequest
	(*GetEstimatedRangeSizeResponse)(nil), // 31: GetEstimatedRangeSizeResponse
	(*GetBoundaryKeysRequest)(nil),        // 32: GetBoundaryKeysRequest
	(*GetBoundaryKeysResponse)(nil),       // 33: GetBoundaryKeysResponse
	(*GetAddressesForKeyRequest)(nil),     // 34: GetAddressesForKeyRequest
	(*GetAddressesForKeyResponse)(nil),    // 35: GetAddressesForKeyResponse
	(*BatchedMutationsRequest)(nil),       // 36: BatchedMutationsRequest
	(*OperationFailureResponse)(nil),      // 37: OperationFailureResponse
	(*KeyValue)(nil),                      // 38: KeyValue
	(*KeySelector)(nil),                   // 39: KeySelector
}
var file_lionrock_proto_depIdxs = []int32{
	25, // 0: DatabaseRequest.transaction_options:type_name -> SetTransactionOptionRequest
	10, // 1: DatabaseRequest.get_value:type_name -> GetValueRequest
	18, // 2: DatabaseRequest.get_range:type_name -> GetRangeRequest
	14, // 3: DatabaseRequest.set_value:type_name -> SetValueRequest
	16, // 4: DatabaseRequest.clear_key:type_name -> ClearKeyRequest
	17, // 5: DatabaseRequest.clear_range:type_name -> ClearKeyRangeRequest
	15, // 6: DatabaseRequest.mutate_value:type_name -> MutateValueRequest
	12, // 7: DatabaseRequest.get_key:type_name -> GetKeyRequest
	30, // 8: DatabaseRequest.get_estimated_range_size:type_name -> GetEstimatedRangeSizeRequest
	32, // 9: DatabaseRequest.get_boundary_keys:type_name -> GetBoundaryKeysRequest
	34, // 10: DatabaseRequest.get_addresses_for_key:type_name -> GetAddressesForKeyRequest
	11, // 11: DatabaseResponse.get_value:type_name -> GetValueResponse
	19, // 12: DatabaseResponse.get_range:type_name -> GetRangeResponse
	13, // 13: DatabaseResponse.get_key:type_name -> GetKeyResponse
	9,  // 14: DatabaseResponse.committed_transaction:type_name -> CommitTransactionResponse
	31, // 15: DatabaseResponse.get_estimated_range_size:type_name -> GetEstimatedRangeSizeResponse
	33, // 16: DatabaseResponse.get_boundary_keys:type_name -> GetBoundaryKeysResponse
	35, // 17: DatabaseResponse.get_addressses_for_key:type_name -> GetAddressesForKeyResponse
	7,  // 18: StreamingDatabaseRequest.start_transaction:type_name -> StartTransactionRequest
	8,  // 19: StreamingDatabaseRequest.commit_transaction:type_name -> CommitTransactionRequest
	10, // 20: StreamingDatabaseRequest.get_value:type_name -> GetValueRequest
	14, // 21: StreamingDatabaseRequest.set_value:type_name -> SetValueRequest
	16, // 22: StreamingDatabaseRequest.clear_key:type_name -> ClearKeyRequest
	17, // 23: StreamingDatabaseRequest.clear_range:type_name -> ClearKeyRangeRequest
	18, // 24: StreamingDatabaseRequest.get_range:type_name -> GetRangeRequest
	20, // 25: StreamingDatabaseRequest.add_conflict_key:type_name -> AddConflictKeyRequest
	21, // 26: StreamingDatabaseRequest.add_conflict_range:type_name -> AddConflictRangeRequest
	22, // 27: StreamingDatabaseRequest.get_read_version:type_name -> GetReadVersionRequest
	24, // 28: StreamingDatabaseRequest.set_read_version:type_name -> SetReadVersionRequest
	25, // 29: StreamingDatabaseRequest.set_transaction_option:type_name -> SetTransactionOptionRequest
	15, // 30: StreamingDatabaseRequest.mutate_value:type_name -> MutateValueRequest
	26, // 31: StreamingDatabaseRequest.watch_key:type_name -> WatchKeyRequest
	28, // 32: StreamingDatabaseRequest.get_approximate_size:type_name -> GetApproximateSizeRequest
	12, // 33: StreamingDatabaseRequest.get_key:type_name -> GetKeyRequest
	30, // 34: StreamingDatabaseRequest.get_estimated_range_size:type_name -> GetEstimatedRangeSizeRequest
	32, // 35: StreamingDatabaseRequest.get_boundary_keys:type_name -> GetBoundaryKeysRequest
	34, // 36: StreamingDatabaseRequest.get_addresses_for_key:type_name -> GetAddressesForKeyRequest
	36, // 37: StreamingDatabaseRequest.batched_mutations:type_name -> BatchedMutationsRequest
	14, // 38: BatchedMutations.set_value:type_name -> SetValueRequest
	16, // 39: BatchedMutations.clear_key:type_name -> ClearKeyRequest
	17, // 40: BatchedMutations.clear_range:type_name -> ClearKeyRangeRequest
	20, // 41: BatchedMutations.add_conflict_key:type_name -> AddConflictKeyRequest
	21, // 42: BatchedMutations.add_conflict_range:type_name -> AddConflictRangeRequest
	15, // 43: BatchedMutations.mutate_value:type_name -> MutateValueRequest
	9,  // 44: StreamingDatabaseResponse.commit_transaction:type_name -> CommitTransactionResponse
	37, // 45: StreamingDatabaseResponse.operation_failure:type_name -> OperationFailureResponse
	11, // 46: StreamingDatabaseResponse.get_value:type_name -> GetValueResponse
	19, // 47: StreamingDatabaseResponse.get_range:type_name -> GetRangeResponse
	23, // 48: StreamingDatabaseResponse.get_read_version:type_name -> GetReadVersionResponse
	27, // 49: StreamingDatabaseResponse.watch_key:type_name -> WatchKeyResponse
	29, // 50: StreamingDatabaseResponse.get_approximate_size:type_name -> GetApproximateSizeResponse
	13, // 51: StreamingDatabaseResponse.get_key:type_name -> GetKeyResponse
	31, // 52: StreamingDatabaseResponse.get_estimated_range_size:type_name -> GetEstimatedRangeSizeResponse
	33, // 53: StreamingDatabaseResponse.get_boundary_keys:type_name -> GetBoundaryKeysResponse
	35, // 54: StreamingDatabaseResponse.get_addresses_for_key:type_name -> GetAddressesForKeyResponse
	39, // 55: GetKeyRequest.keySelector:type_name -> KeySelector
	1,  // 56: MutateValueRequest.type:type_name -> MutationType
	39, // 57: GetRangeRequest.startKeySelector:type_name -> KeySelector
	39, // 58: GetRangeRequest.endKeySelector:type_name -> KeySelector
	0,  // 59: GetRangeRequest.streamingMode:type_name -> StreamingMode
	38, // 60: GetRangeResponse.keyValues:type_name -> KeyValue
	5,  // 61: BatchedMutationsRequest.mutations:type_name -> BatchedMutations
	4,  // 62: TransactionalKeyValueStore.executeTransaction:input_type -> StreamingDatabaseRequest
	2,  // 63: TransactionalKeyValueStore.execute:input_type -> DatabaseRequest
	6,  // 64: TransactionalKeyValueStore.executeTransaction:output_type -> StreamingDatabaseResponse
	3,  // 65: TransactionalKeyValueStore.execute:output_type -> DatabaseResponse
	64, // [64:66] is the sub-list for method output_type
	62, // [62:64] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_lionrock_proto_init() }
func file_lionrock_proto_init() {
	if File_lionrock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lionrock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchedMutations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearKeyRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConflictKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConflictRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTransactionOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApproximateSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApproximateSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEstimatedRangeSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEstimatedRangeSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoundaryKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoundaryKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesForKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressesForKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchedMutationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationFailureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lionrock_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lionrock_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DatabaseRequest_GetValue)(nil),
		(*DatabaseRequest_GetRange)(nil),
		(*DatabaseRequest_SetValue)(nil),
		(*DatabaseRequest_ClearKey)(nil),
		(*DatabaseRequest_ClearRange)(nil),
		(*DatabaseRequest_MutateValue)(nil),
		(*DatabaseRequest_GetKey)(nil),
		(*DatabaseRequest_GetEstimatedRangeSize)(nil),
		(*DatabaseRequest_GetBoundaryKeys)(nil),
		(*DatabaseRequest_GetAddressesForKey)(nil),
	}
	file_lionrock_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DatabaseResponse_GetValue)(nil),
		(*DatabaseResponse_GetRange)(nil),
		(*DatabaseResponse_GetKey)(nil),
		(*DatabaseResponse_CommittedTransaction)(nil),
		(*DatabaseResponse_GetEstimatedRangeSize)(nil),
		(*DatabaseResponse_GetBoundaryKeys)(nil),
		(*DatabaseResponse_GetAddresssesForKey)(nil),
	}
	file_lionrock_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StreamingDatabaseRequest_StartTransaction)(nil),
		(*StreamingDatabaseRequest_CommitTransaction)(nil),
		(*StreamingDatabaseRequest_GetValue)(nil),
		(*StreamingDatabaseRequest_SetValue)(nil),
		(*StreamingDatabaseRequest_ClearKey)(nil),
		(*StreamingDatabaseRequest_ClearRange)(nil),
		(*StreamingDatabaseRequest_GetRange)(nil),
		(*StreamingDatabaseRequest_AddConflictKey)(nil),
		(*StreamingDatabaseRequest_AddConflictRange)(nil),
		(*StreamingDatabaseRequest_GetReadVersion)(nil),
		(*StreamingDatabaseRequest_SetReadVersion)(nil),
		(*StreamingDatabaseRequest_SetTransactionOption)(nil),
		(*StreamingDatabaseRequest_MutateValue)(nil),
		(*StreamingDatabaseRequest_WatchKey)(nil),
		(*StreamingDatabaseRequest_GetApproximateSize)(nil),
		(*StreamingDatabaseRequest_GetKey)(nil),
		(*StreamingDatabaseRequest_GetEstimatedRangeSize)(nil),
		(*StreamingDatabaseRequest_GetBoundaryKeys)(nil),
		(*StreamingDatabaseRequest_GetAddressesForKey)(nil),
		(*StreamingDatabaseRequest_BatchedMutations)(nil),
	}
	file_lionrock_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*BatchedMutations_SetValue)(nil),
		(*BatchedMutations_ClearKey)(nil),
		(*BatchedMutations_ClearRange)(nil),
		(*BatchedMutations_AddConflictKey)(nil),
		(*BatchedMutations_AddConflictRange)(nil),
		(*BatchedMutations_MutateValue)(nil),
	}
	file_lionrock_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StreamingDatabaseResponse_CommitTransaction)(nil),
		(*StreamingDatabaseResponse_OperationFailure)(nil),
		(*StreamingDatabaseResponse_GetValue)(nil),
		(*StreamingDatabaseResponse_GetRange)(nil),
		(*StreamingDatabaseResponse_GetReadVersion)(nil),
		(*StreamingDatabaseResponse_WatchKey)(nil),
		(*StreamingDatabaseResponse_GetApproximateSize)(nil),
		(*StreamingDatabaseResponse_GetKey)(nil),
		(*StreamingDatabaseResponse_GetEstimatedRangeSize)(nil),
		(*StreamingDatabaseResponse_GetBoundaryKeys)(nil),
		(*StreamingDatabaseResponse_GetAddressesForKey)(nil),
	}
	file_lionrock_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*GetRangeRequest_StartKeySelector)(nil),
		(*GetRangeRequest_StartBytes)(nil),
		(*GetRangeRequest_EndKeySelector)(nil),
		(*GetRangeRequest_EndBytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lionrock_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lionrock_proto_goTypes,
		DependencyIndexes: file_lionrock_proto_depIdxs,
		EnumInfos:         file_lionrock_proto_enumTypes,
		MessageInfos:      file_lionrock_proto_msgTypes,
	}.Build()
	File_lionrock_proto = out.File
	file_lionrock_proto_rawDesc = nil
	file_lionrock_proto_goTypes = nil
	file_lionrock_proto_depIdxs = nil
}
